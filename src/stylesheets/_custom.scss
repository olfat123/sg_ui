:root {
	@each $breakpoint, $value in $grid-breakpoints {
		--#{$prefix}#{$breakpoint}: #{$value};
	}

	--prefix: #{$prefix};
	--swiper-pagination-color: #{$progress-bar-bg};
}

#app {
	display: flex;
	flex-direction: column;
	align-items: stretch;
	min-height: 100vh;

	.app-main {
		flex-grow: 1;
	}
}

body {
	&.dom-loaded {
		.app-loader {
			display: none !important;
		}
	}

	&:not(.dom-loaded) {
		overflow: hidden;
		overflow-y: hidden;
		scrollbar-width: none;
		/* Firefox 64 */
		position: relative;
		/* Safari */
		-ms-overflow-style: none;
		/* IE 11 */

		&::-webkit-scrollbar {
			width: 0;
			background: transparent;
			/* Disable scrollbar Chrome/Safari/Webkit */
		}
	}
}

mark,
.mark {
	color: inherit;
}

b,
strong {
	font-weight: $font-weight-bold;
}

ol,
ul {
	padding-left: map-get($spacers, 3);
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
	-webkit-appearance: none;
	margin: 0;
}

/* Firefox */
input[type="number"] {
	-moz-appearance: textfield;
}

/* clears the 'X' from Internet Explorer */
input.hide-clear[type="search"]::-ms-clear,
input.hide-clear[type="search"]::-ms-reveal {
	display: none;
	width: 0;
	height: 0;
}

/* clears the 'X' from Chrome */
input.hide-clear[type="search"]::-webkit-search-decoration,
input.hide-clear[type="search"]::-webkit-search-cancel-button,
input.hide-clear[type="search"]::-webkit-search-results-button,
input.hide-clear[type="search"]::-webkit-search-results-decoration {
	display: none;
}

/*rtl:begin:ignore*/
[dir="rtl"] {
	.rtl-mirror {
		transform: scale(-1, 1);
	}

	// A few input types should stay LTR
	// See https://rtlstyling.com/posts/rtl-styling#form-inputs
	[type="tel"],
	[type="url"],
	[type="email"],
	[type="number"] {
		direction: ltr;
	}
}
/*rtl:end:ignore*/

textarea {
	height: 8.75rem !important;
}

.container-off-canvas-start {
	margin-left: calc((#{$grid-gutter-width} * 0.5) * -1);
	padding-left: 0;

	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint, $grid-breakpoints) {
			@if (map-get($container-max-widths, $breakpoint)) {
				margin-left: calc(
					((100vw - ((#{map-get($container-max-widths, $breakpoint)} - #{$grid-gutter-width}))) * 0.5) * -1
				) !important;
				padding-left: calc(
					((100vw - ((#{map-get($container-max-widths, $breakpoint)} - #{$grid-gutter-width}))) * 0.5)
				) !important;
			}
		}
	}
}
.container-off-canvas-end {
	margin-right: calc((#{$grid-gutter-width} * 0.5) * -1);
	padding-right: 0;

	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint, $grid-breakpoints) {
			@if (map-get($container-max-widths, $breakpoint)) {
				margin-right: calc(
					((100vw - ((#{map-get($container-max-widths, $breakpoint)} - #{$grid-gutter-width}))) * 0.5) * -1
				) !important;
				padding-right: calc(
					((100vw - ((#{map-get($container-max-widths, $breakpoint)} - #{$grid-gutter-width}))) * 0.5)
				) !important;
			}
		}
	}
}
